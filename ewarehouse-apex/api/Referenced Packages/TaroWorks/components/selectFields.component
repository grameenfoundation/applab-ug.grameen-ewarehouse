<apex:component >
  <apex:includeScript value="{!$Resource.gfsurveys__jquery}" />
  <apex:includeScript value="{!$Resource.gfsurveys__underscore}" />
  
    <style type="text/css">

        #availableFieldsContainer, #selectedFieldsContainer{
            float:left;
            width: 37%;
            margin: 10px 0;
        }
        #availableFields, #selectedFields{
            border: solid 1px black;
            height: 90px;
            overflow: auto;
            margin-top: 5px;
        }
        #selectButtonsSection, #orderSelectedSection{
            float:left;
            padding: 50px 2% 50px 4%;
        }
        .fieldSelected{
            background: #ddd;
        }
        #selectFieldComponent li{
            margin-left: 3px !important;
            cursor: pointer;
        }
        #selectFieldComponent ul{
            list-style-type: none !important;
            padding-left: 10px !important;
            margin-right: 10px;
        }
        #selectFieldButton, #deselectFieldButton, #orderUpButton, #orderDownButton{
            cursor: pointer;
        }
        .listTitle{
            padding-left: 15px;
        }
        .orderUpSpan{
            padding-left: 5px;
        }
        .selectFieldSpan{
            padding-left: 3px;
        }
    </style>
    

    <script id="selectField-template" type="text/template">
        <div id="selectFieldComponent" >
            <div id="availableFieldsContainer">
                <span class="listTitle" >Available Fields</span>
                <div id="availableFields">
                    <ul id="ulAvailableFields" >
                        <% for(var i in listOfElements) { 
                                if(!listOfElements[i].isSelected){ %>
                                    <li name="<%- listOfElements[i].name %>" id="<%- listOfElements[i].id %>" ><%- listOfElements[i].label %></li>
                             <% }
                            } %>
                    </ul>
                </div>
            </div>
            <div id="selectButtonsSection" >
                <span class="selectFieldSpan">Add</span>
                <div id="selectFieldButton"><img class="rightArrowIcon" src="/s.gif"></img></div>
                <div id="deselectFieldButton"><img class="leftArrowIcon" src="/s.gif"></img></div>
                <span class="selectFieldSpanRemove">Remove</span>
            </div>

            <div id="selectedFieldsContainer">
                <span class="listTitle" >Selected Fields</span>
                <div id="selectedFields">
                    <ul id="ulSelectedFields" >
                        <% for(var i in listOfElements) { 
                                if(listOfElements[i].isSelected){ %>
                                    <li name="<%- listOfElements[i].name %>" id="<%- listOfElements[i].id %>" ><%- listOfElements[i].label %></li>
                             <% }
                            } %>
                    </ul>
                </div>
            </div>
            <div id="orderSelectedSection" >
                <span class="orderUpSpan">Up</span>
                <div id="orderUpButton"><img class="upArrowIcon" src="/s.gif"></img></div>
                <div id="orderDownButton"><img class="downArrowIcon" src="/s.gif"></img></div>
                <span class="orderDownSpan">Down</span>
            </div>
        </div>
    </script>


    <script>
        
        /**
         *  Class that holds the structure of the component.
         */
        var selectFieldsComponent = function(containerDiv, listOfObjects){

            // Private attributes.
            var listElements     = listOfObjects;  // List of objects.
            var containerElement = containerDiv;   // Container div. 
            
            // Public methods:

            /**
             *  Constructor of the component.
             */
            this.loadSelectFieldComponent = function(){
               
                listElements.sort(customSortByName);  // Sort objects from the beginning.
                var myTemplate    = _.template($('#selectField-template').html());
                containerElement.html(myTemplate({
                    listOfElements : listElements
                }));

                //Event handler when user clicks on "Add" field button.
                $('#selectFieldComponent #selectFieldButton').click(function(){
                    var objectId = $('#selectFieldComponent ul#ulAvailableFields li.fieldSelected').attr('id');
                    if( isNotUndefined(objectId) ){
                        changeFieldStatus(objectId, true);
                    }
                });

                //Event handler when user clicks on "Remove" field button.
                $('#selectFieldComponent #deselectFieldButton').click(function(){
                    var objectId = $('#selectFieldComponent ul#ulSelectedFields li.fieldSelected').attr('id');
                    if( isNotUndefined(objectId) ){
                        changeFieldStatus(objectId, false);
                    }
                });

                // Event handler when user clicks on a li element.
                $('#selectFieldComponent').on('click', 'li', function(){
                    if($('#selectFieldComponent li.fieldSelected').length > 0) {
                        // Remove selections on other selected fields.
                        $('#selectFieldComponent li.fieldSelected').removeClass('fieldSelected');
                    }
                    $(this).addClass('fieldSelected');
                });

                // Event handler when user clicks on button "Up" in order to move a selected field up.
                $('#orderSelectedSection #orderUpButton').click(function(){
                    var current = $('#selectFieldComponent ul#ulSelectedFields li.fieldSelected');
                    current.prev().before(current);
                });

                // Event handler when user clicks on button "Down" in order to move a selected field down.
                $('#orderSelectedSection #orderDownButton').click(function(){
                    var current = $('#selectFieldComponent ul#ulSelectedFields li.fieldSelected');
                    current.next().after(current);
                });
            }

            /**
             *  Returns the selected fields (sorted).
             *  @return List of selected fields sorted.
             */
            this.obtainSortedSelectedObjects = function(){
                var sortedSelectedObjects = []
                $('#selectFieldComponent ul#ulSelectedFields li').each(function() {
                    var objId    = $(this).attr('id');
                    var objLabel = $(this).html();
                    var objName  = $(this).attr('name');
                    var isSel    = true;
                    var dummyObj = {id: objId, name: objName, label: objLabel, isSelected: isSel}
                    sortedSelectedObjects.push(dummyObj);
                });
                return sortedSelectedObjects;
            }

            // End public methods.


            // Private methods:

            /**
             *  Method in charge to change object attribute "isSelected" also call the method that
             *  will change the html elements.
             *  @param idField Id of the field that will change status.
             *  @param newStatus Value that "isSelected" attribute will have, true if the user is selecting a field, 
             *  false if user is deselecting it.
             */
            var changeFieldStatus = function(idField, newStatus){
                var currentSelField        = _.find(listElements, function(elem){ return elem.id == idField; });
                currentSelField.isSelected = newStatus;
                changeFieldContext(currentSelField, newStatus);
            }

            /**
             *  Method in charge to make changes in the HTML (change in what list the field is).
             *  @param currentSelField Selected field.
             *  @param newStatus True if the user is adding a field, false if user is removing it.
             */
            var changeFieldContext = function(currentSelField, newStatus){
                if(newStatus){
                    var selectedElement = $('#selectFieldComponent ul#ulAvailableFields li#' + currentSelField.id);
                    selectedElement.removeClass('fieldSelected').remove();
                    $('#selectFieldComponent ul#ulSelectedFields').append(selectedElement);
                }
                else{
                    var selectedElement = $('#selectFieldComponent ul#ulSelectedFields li#' + currentSelField.id);
                    selectedElement.removeClass('fieldSelected').remove();
                    insertAvailableFieldAlphabetically(selectedElement);
                }
            }

            /**
             *  Method that insert an available field alphabetically in the list of available fields.
             *  @param Field to be inserted.
             */
            var insertAvailableFieldAlphabetically = function(selectedElement){
                if( $('#selectFieldComponent ul#ulAvailableFields li').length == 0 ){
                    // There is no element in the list.
                    $('#selectFieldComponent ul#ulAvailableFields').append(selectedElement);
                }
                else{
                    // There is at least one element in the list.
                    $('#selectFieldComponent ul#ulAvailableFields li').each(function() {
                       var nextSibling     = $(this).next();
                       var goingAfterThis  = selectedElement.html().toLowerCase() >= $(this).html().toLowerCase();
                       var goingBeforeNext = nextSibling.length > 0 && selectedElement.html().toLowerCase() <= nextSibling.html().toLowerCase();
                       if(goingAfterThis && goingBeforeNext){
                            // Goes after current and before the next.
                            $(this).after(selectedElement);
                            return false;
                       }
                       else if(!goingAfterThis){
                            // Goes before current.
                            $(this).before(selectedElement);
                            return false;
                       }
                       else if(nextSibling.length == 0){
                            // There is no next field.
                            $(this).after(selectedElement);
                            return false;
                       }
                    });
                }
            }

            /**
             *    Algorithm to order fields by label.
             */
            var customSortByName = function(a, b){
                 var nameA = a.label.toLowerCase(), nameB = b.label.toLowerCase()
                 if (nameA < nameB) //sort string ascending
                  return -1
                 if (nameA > nameB)
                  return 1
                 return 0 //default return value (no sorting)
            }

            /**
             *  Method to know if an element is not undefined
             *  @param elem Element to check.
             *  @return True if element is not undefined, false otherwise.
             */
            var isNotUndefined = function(elem){
                return typeof elem != 'undefined';
            }

            // End private methods.

        }

        /*
            // How to use:

            // Preconditions: Must have the component loaded in the page 

            // When we want to instantiate the component, we select the jQuery object that will contain the list... 
            var containerDiv  = $('#container');
            
            // ... after that, we create the array of objects with the format: {id:..., name:..., label:..., isSelected:...} ...
            var listOfObj = [];
            var dummyObj1 = {id: "a001", name:"field1", label: "Field 1", isSelected: false};
            var dummyObj2 = {id: "a002", name:"field2", label: "Field 2", isSelected: false};
            var dummyObj3 = {id: "a003", name:"field3", label: "Field 3", isSelected: false};
            var dummyObj4 = {id: "a004", name:"field4", label: "Field 4", isSelected: true};
            var dummyObj5 = {id: "a005", name:"field5", label: "Field 5", isSelected: false};

            listOfObj.push(dummyObj1);
            listOfObj.push(dummyObj2);
            listOfObj.push(dummyObj3);
            listOfObj.push(dummyObj4);
            listOfObj.push(dummyObj5);

            // ... then we create our component with the container jQuery object and the list of objects as parameters.
            var selectComponent = new selectFieldsComponent(containerDiv, listOfObj);

            // ... and finally call loadSelectFieldComponent method 
            selectComponent.loadSelectFieldComponent();

        */

    </script>


</apex:component>