<!--(c) Copyright 2013 Grameen Foundation USA. All rights reserved-->
<apex:page sidebar="false" tabStyle="SurveyManager__tab" standardController="gfsurveys__Survey__c"
    extensions="gfsurveys.SurveyScoringController">

    <!-- Component -->
    <c:blockOverlay label="{!$Label.LOADING}..."/>

    <!-- Styles -->
    <style type="text/css">
        .questionAutoNumber{
            margin-right: 20px;
            margin-left: -10px;
            color:#6d6d6d;
            font-family: Arial,Helvetica,sans-serif;
            font-size: 18px;
        }
        .mainDiv {
            position: fixed;
            width: 100%;
        }

        .addNewScoringGroup {
           padding: 25px;
           border-color: black;
           border-width: 1px;
           border-style: solid;
           background-color: #EEE;
        }

        .addNewScoringGroup input{
           width:75%;
        }


         /* hand cursor on links */
        .pbBody a{
            cursor:pointer;
        }
        .scoringLink a {
            cursor:pointer;
        }

        .autonumber{
              font-size: 1.2em;
              margin-right:5px;
        }

        .scoringGroupLabel {
            font-size: 1.2em;
            min-width: 60px;
            overflow: hidden;
            text-overflow: ellipsis;
            -o-text-overflow: ellipsis;
            white-space: nowrap;
            max-width: 200px;
            float: left;
            padding-right:4px;

        }

        .header{
            color: white;
            font-size: 14px;
            font-weight:bolder;
            height:20px;
            vertical-alignment:middle;
        }

        .placeHolder{
            width:25%;
            clear: both;
        }

       #questionArea table{
            padding: 10px;
            width:100%
        }

        .scores{
            width: 35px;
            border-left-style: solid;
            border-left-width: 1px;
            border-right-style: solid;
            border-right-width: 1px;

        }
        #questionArea input{
            width:30px;


        }
        .section{
            color:black;
            height:37px;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 18px;
            padding: 8 px;

        }

        .notScoringQuestion{
            color:gray; !important;
            background-color:gainsboro; !important;
            height:37px;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 18px;
            padding: 8 px;
            padding-left:18px;

        }

        .scoringQuestion{
            color:black;
            background-color: gainsboro;
            height:37px;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 18px;
            padding: 8 px;
            padding-left: 20px;
        }

        .customDisabled{
            opacity: 0.5;
        }

        .questionZone{
            padding-left: 7px;
        }


         #buttons {margin:20px 2px;float:right;}


        .scoringGroupPlaceHolder{
            margin-top:25px;
            margin-bottom: 25px;
            min-height: 30px;
        }

        tr.section{height:37px}
        tr.section>td.question{padding-left:18px}
        td.notScoringQuestion{color:#777}
        span.hidden{display:none}
        input[readonly="readonly"]{background-color:#DDD}

    </style>

    <!-- Use template -->
    <apex:composition template="gfsurveys__SurveyBuilderTemplate">
        <!-- Set variables to be used later -->
        <apex:define name="init">
            <apex:variable var="selectedTab" value="SCORING"/>
            <apex:variable var="hasError" value="{!hasApexMessage}"/>
            <apex:variable var="isPublished" value="{!isPublished}"/>
            <apex:variable var="survey" value="{!survey}"/>
        </apex:define>

        <!-- Define the body -->
        <apex:define name="body">

            <span style="display:none" id = "scoreGroupList">{!listGroups}</span>
            <span style="display:none" id = "scoreValuesList">{!listScoreValues}</span>

            <apex:pageBlock title="{!$Label.SURVEY_SCORING_GROUPS}" >
                <span class="description"> {!$Label.SURVEY_SCORING_DESCRIPTION}</span>

                <div class="scoringGroupPlaceHolder"></div>

                <button class="createNewGroup" onClick="createNewGroup()">
                    {!$Label.CREATE}
                </button>
            </apex:pageBlock>

            <div id="questionArea" style="display:none">
                <apex:pageBlock title="{!$Label.SURVEY_SCORING_SCORES_VALUES}" >
                    <table id="tableQuestions">
                        <tr>
                            <td class="name"> {!$Label.QUESTION_AND_SECTION}</td>
                        </tr>
                    </table>
                </apex:pageBlock>
            </div>
          <apex:form prependId="false">
                <apex:outputText id="existing-questions" styleClass="existing-questions hidden" value="{!lastBatchOfQuestions}"/>
                <apex:outputText id="hasMoreQuestions" styleClass="hasMoreQuestions hidden" value="{!hasMoreQuestions}"/>
                <apex:outputText id="concurrentSaveArea" styleClass="concurrentSaveArea" style="display:none" value="{!concurrentSave}"/>

                <!-- Action functions -->
                <apex:actionFunction name="sendScoringData" action="{!saveScoring}" rerender="errorMessages, questionArea, concurrentSaveArea"
                    oncomplete="afterSendScoringData()">
                    <apex:param name="scoringGroupJsonId" id="scoringGroupJsonId" assignTo="{!scoringGroupStr}" value=""/>
                    <apex:param name="scoringValuesJsonId" id="scoringValuesJsonId" assignTo="{!scoringValuesJson}" value=""/>
                    <apex:param name="shouldContinue" id="shouldContinue" assignTo="{!continueAfterwards}" value=""/>
                </apex:actionFunction>

                <!-- Get questions from controller in batches, so not to hit script statement limit -->
                <apex:actionStatus id="loadMoreQuestionsStatus" onstop="drawFetchedQuestions()"/>
                <apex:actionFunction name="loadMoreQuestions" action="{!loadMoreQuestions}"
                    reRender="existing-questions,hasMoreQuestions" status="loadMoreQuestionsStatus" >
                    <apex:param name="questions" value="" />
            </apex:actionFunction>
          </apex:form>
      </apex:define>
    </apex:composition>

    <!-- Scripts -->
    <script type="text/javascript">

        // array in which save the scoring group
        scoringGroups = {};
        // for generating unique ids for each scoringGroup
        var scoringGroupCount = 0;
        // for knowing if the page is in editing mode
        var isEditing = false;
        // questions objects
        questions = null;

        // KeyCode when pressing "Enter" button.
        var KEY_RETURN = 13;
        var MSG_CONFIRM_DELETE_SCORE_GROUP = "{!$Label.SURVEY_SCORING_CONFIRM_GROUP_DELETE}";
        var MSG_ERR_INVALID_GROUP_NAME_LENGTH = "{!$Label.SURVEY_SCORING_ERR_GROUP_LENGTH}";
        var MSG_ERR_INVALID_SCORE_VALUE = "{!$Label.SURVEY_SCORING_ERR_SCOREVALUEOUTOFRANGE}";
        var MSG_ERR_USED_GROUP_NAME = "{!$Label.SURVEY_SCORING_ERR_USED_NAME}";
        var PPI_ID = 'PPI';
        var isPPI = {!survey.isPPI__c};
        //constructor of the class ScoringGroups
        var ScoringGroup = function(name, position) {
            this.name = name;
            this.position = position;
        }
        var popupSave = false;

        function afterSendScoringData(){
            unblockPage();
            hasUnsavedChanges = false;
            concurrentSavePopup();
            var errorMessage = $('.message').attr('class');
            hasUnsavedChanges = errorMessage != undefined;
            if(popupSave && redirect && !hasUnsavedChanges) doRedirect();
        }
        // this method generates the SC + INT which should appears before every question group
        function reassignAutonumber() {
            $(".autonumber").each(function(i, elem) {
                if(!isPPI)
                    $(elem).html('SC' + i);
                else if(i != 0)
                    $(elem).html('SC' + (i - 1));
            });

            $('#tableQuestions td[class*="_header"]').each(function(e, elem){
                if(!isPPI)
                    $(elem).html('SC' + e);
                else if(e == 0)
                    $(elem).html(PPI_ID);
                else
                    $(elem).html('SC' + (e - 1));
            });
        }

        //this method generates the div and span that appears as label of scoring group
        function getReadonlyDiv(id, name) {
           if(name == PPI_ID)
               return '<span class="autonumber" style="float:left;"></span>' + '<span class="scoringGroupLabel" style="float:left;">' + name + '</span>';
           else
               return '<span class="autonumber" style="float:left;"></span>' + '<span class="scoringGroupLabel" style="float:left;">' + name + '</span>' + '<div style="float:right"><a id="edit' + id + '" class="scoringLink" >{!$Label.EDIT}</a>  <a id="delete' + id + '" class="scoringLink" >{!$Label.DELETE}</a></div>'

        }

        //this method generates the td that is used as header of the column of each scoring group
        function getHeaderTd(scoringGroupId){

            return '<td class="'+ scoringGroupId + '_header">' + scoringGroupId + '</td>';
        }

        // Remove all non-integer characters from this input
        function integersOnly(){
            $(this).val( $(this).val().replace(/[^-\d]/,''));
        }

        //this method generates a new column in the table when a new scoring group is created
        function addTableTd(scoringGroupId){
            var tdClass = scoringGroupId == '0' && isPPI ? 'ppiInput' : 'svInput';
            $('.questionZone').before('<td id="' + scoringGroupId + '" ><input class="' + tdClass + '"/></td>');
            $('.question').before('<td id="' + scoringGroupId + '" style="width:30px" />');
            $('.name').before(getHeaderTd(scoringGroupId));

            //add a function to validate only numerical values
            $('.' + tdClass).keyup( integersOnly ).blur( integersOnly );

            // If is a distributed survey make PPI score read only
            if({!wasDownloaded}) $('.ppiInput').attr('readonly','readonly');

            // For locals questions hide the ppi score input
            for(var qid in questions){
                if(questions[qid].originId == '' || questions[qid].originId == null && !{!hasPPILicense}){
                    for(var i in questions[qid].options){
                        $('#' + questions[qid].options[i].id + ' .ppiInput').hide();
                    }
                }
            }
        }

        //this method change the column name of the sg when the sg name changes
        function changeTableTD(oldScoringGroupName, newScoringGroupName){
            var groupId = getGroupIdByName(newScoringGroupName);
            var oldGroupId = getGroupIdByName(oldScoringGroupName);
            $( '.'+ oldGroupId +'_header').replaceWith(getHeaderTd(groupId));
        }

        //this method removes the columns of the scoring group when the sg is deleted
        function removeTableTds(scoringGroupId){
            $('#tableQuestions td[id="' + scoringGroupId + '"]').remove();
            $('#tableQuestions td[class="' + scoringGroupId + '_header"]').remove();
        }

        //this method must change the readonly view with the editable view
        function bindClickOnEditEvent(id){
            $("#edit" + id).bind("click", { id : id}, function(event) {
                $('.createNewGroup').attr("disabled",true).addClass("customDisabled");
                if(isEditing)
                    return; //If is editing I cant do anything
                isEditing = true; //I set that I am editing
                hasUnsavedChanges = true;
                $("#placeHolder" + event.data.id).html(getEditInput(id));

                var sg = scoringGroups[event.data.id];    //I get the sg from sg array and put the
                if(sg){                                 // name in the text box
                    document.querySelector('#defaultScoringName').value = decodeHTMLEntities(sg.name);
                }
                bindClickOnSave(event.data.id)          //binding saving and cancel event.
                bindCancel(event.data.id);
            });
        }

        //this method deletes the sg and update the table
        function bindDelete(id) {
            $("#delete" + id).bind("click", {
                id : id
            }, function(event) {
                if(!isEditing){
                    if(confirm(MSG_CONFIRM_DELETE_SCORE_GROUP)){
                        //scoringGroups[event.data.id]=null;
                        hasUnsavedChanges = true;
                        popupSave = false;
                        removeTableTds(id);
                        $("#placeHolder" + event.data.id).remove();
                        if( $('.scoringGroupPlaceHolder .placeHolder').size() == 0 ) $('#questionArea').hide();
                        reassignAutonumber(); // I have to re-assign the autogenerated number
                    }
                    return false;
                }
            });
        }
        //this method must save the change in the sg and update the table
        function bindClickOnSave(id) {
            $("#save" + id).bind('click', {id : id}, function(event) {
                var nameGroup = jQuery.trim( document.querySelector("#defaultScoringName").value );
                if(nameGroup.length < 41 && nameGroup.length > 0){
                    nameGroup = nameGroup.replace('"', "'");
                    nameGroup = encodeHTMLEntities(nameGroup);
                    createNewGroupCustom(id, nameGroup);
                }
                else{
                    alert(MSG_ERR_INVALID_GROUP_NAME_LENGTH);
                }
                popupSave = false;
                reassignAutonumber();
            });
            $('input').bind('keypress', {id : id}, function(e) {
                if(e.keyCode == KEY_RETURN ) {
                    var nameGroup = jQuery.trim( document.querySelector("#defaultScoringName").value );
                    if(nameGroup.length < 41 && nameGroup.length > 0){
                        nameGroup = nameGroup.replace('"', "'");
                        nameGroup = encodeHTMLEntities(nameGroup);
                        createNewGroupCustom(id, nameGroup);
                    }
                    else{
                        alert(MSG_ERR_INVALID_GROUP_NAME_LENGTH);
                    }
                }
                reassignAutonumber();
            });
        }

        function createNewGroupCustom(id, nameGroup){
            if( !isScoreGroupNameUsed( nameGroup ) ){
                $('#questionArea').show();
                $('.createNewGroup').text(' {!$Label.ADD} ').attr("disabled", false).removeClass("customDisabled");
                // I get the old Scoring group with the id
                // for checking if it already exists
                var oldScoringGroup =  scoringGroups[id];
                // I get the name of the sg from the input create a new one an store it
                var name = nameGroup;
                var sg = new ScoringGroup(name,id);
                scoringGroups[id]= sg;
                // now updating the header of the page with the change
                $("#placeHolder" + id).empty().append(getReadonlyDiv(id, name));
                bindDelete(id);
                bindClickOnEditEvent(id);
                isEditing = false;
                // finally I update the table
                if(oldScoringGroup){
                     changeTableTD(oldScoringGroup.name, name);    // i am editing, i have to change the header...
                     changeInnerTdData(oldScoringGroup.name,name); // ...and the data attributes of the td related.
                }else{
                     addTableTd(id); //this is new i have to add a new column
                }
            }
            else{
                alert(MSG_ERR_USED_GROUP_NAME);
            }
            reassignAutonumber();

        }

        function changeInnerTdData(oldName, newName){
            $('#tableQuestions td[id="' + oldName + '"]').each(function(){
                $(this).attr('id', newName);
            });
        }


        //Given a new name of ScoreCalculationGroup, returns true if the name is already taken for another SCG of that question.
        function isScoreGroupNameUsed(scgName){
            var isUsed = false;
            $('.placeHolder .scoringGroupLabel').each(function(){
                if( $(this).html() == scgName ) isUsed = true;
            });
            return isUsed;
        }

        //This method must cancel the editing
        //this mean restore the original one(if you are editing)
        //or remove a new row
        function bindCancel(id){
            $('#cancel').bind("click",{id:id} , function(event){
                if(scoringGroups[id]){
                    document.querySelector('#defaultScoringName').value = scoringGroups[id].name;
                    $("#placeHolder" + id).children().remove();
                    $("#placeHolder" + id).append(getReadonlyDiv(id, scoringGroups[id].name));
                    bindDelete(id);
                    bindClickOnEditEvent(id);
                }else{
                     $("#placeHolder" + id).remove();
                }
                isEditing=false;
                $('.createNewGroup').attr("disabled", false).removeClass("customDisabled");
                reassignAutonumber();
                popupSave = false;

            });
        }
        function getEditInput(id){
             var defaultName = '{!$Label.SURVEY_SCORING_DEFAULT_GROUP_NAME}';
             defaultNameNumber = defaultName;
             var i=1;
             while (isScoreGroupNameUsed(defaultNameNumber) )
             {
                 defaultNameNumber = defaultName + ' ' + i;
                 i++;
               }
            return '<input id="defaultScoringName" maxlength="40" value="'+defaultNameNumber+'"></input>  <div style="float:right"> <a id="save' + id + '" class="scoringLink" >{!$Label.SAVE}</a>  <a id="cancel" class="scoringLink" >{!$Label.CANCEL}</a></div>'
        }
        function renderEditScoringGroup(inputValue) {
            isEditing = true;
            var editElem = $("<div/>",{"id" : "placeHolder" + scoringGroupCount, "class":"placeHolder"}).append(getEditInput(scoringGroupCount));
            $(".scoringGroupPlaceHolder").append(editElem);
            bindCancel(scoringGroupCount);
            if(inputValue)
                document.querySelector('#defaultScoringName').value = inputValue;

        }

        function addNewScoringGroup() {
            if(!isEditing){
                $('.createNewGroup').attr("disabled",true).addClass("customDisabled");
                renderEditScoringGroup();
                //binding click on save link
                bindClickOnSave(scoringGroupCount);
                scoringGroupCount++;
            }
        }

        //----------------Save data methods-------------------

        // Returns the list of scoringCalculationGroup object.
        function getScoringGroupsData(){

            var listScoringGroups = new Array();
            $('.scoringGroupPlaceHolder').children().each(function(){
                var dummyScoringGroup = new Object();
                dummyScoringGroup['caption'] = $(this).find('.scoringGroupLabel').text();
                listScoringGroups.push(dummyScoringGroup);
            });
            return listScoringGroups;
        }

        function getScoringValues(){
            var listScoringValues = new Array();
            $('#tableQuestions tr').each(function(){
                var optionRelated = $(this).attr('id');
                if( optionRelated  != undefined ){

                    $(this).find('td').each(function(){
                        if( $(this).attr('id') != null && $(this).attr('id') != undefined ){
                            var dummyScoringValue = new Object();
                            var realGroupName = getGroupNameById($(this).attr('id'));

                            dummyScoringValue['optionId'] = optionRelated;
                            dummyScoringValue['groupName'] = realGroupName;
                            dummyScoringValue['value'] = Math.round($(this).children().val());
                            listScoringValues.push(dummyScoringValue);
                        }
                    });
                }
            });
            return listScoringValues;
        }

        // Send the data of scoringCalculationGroup and scoringValue objects.
        function save(continueAfter){
            if(!isEditing){
                // Set unsaved changes in false after save
                hasUnsavedChanges = false;
                blockPage();
                // Need to use setTimeout() so that the page has a chance to show the blocking overlay
                // before starting this process, which could be heavy.
                setTimeout(function(){
                    var jsonStringScoringGroups = JSON.stringify(getScoringGroupsData());
                    var jsonStringScoringValues = JSON.stringify(getScoringValues());
                    sendScoringData( jsonStringScoringGroups, jsonStringScoringValues, continueAfter );
                },200);
            }
            else{
               alert("{!$Label.SURVEY_SCORING_ERR_GROUPS_EDIT}");
               return;
            }
        }

        //-----------------------------------------------------

        //---------------Validation methods--------------------

        //Validates that the given input is valid. (Undefined or null is valid because it becomes 0).
        function validateInput(inputValue){
            var isValid = true;
            if (inputValue != null && inputValue != undefined) {
                if( isNaN(inputValue) ){
                    isValid = false;
                }
                else{
                    if( inputValue < -100 || inputValue > 100){
                        isValid = false;
                    }
                }
            }
            return isValid;
        }

        //---------------- Utility methods---------------

        // Given a groupName, returns the id (autogenerated) related to that name.
        function getGroupIdByName(groupName){
            var spansNames = $('span.scoringGroupLabel');
            for(i=0; i < spansNames.length; i++){
                if( $(spansNames[i]).text() == groupName ){
                    idGroup = spansNames[i].parentElement.attributes.id.value;
                    return idGroup.replace('placeHolder', '');
                }
            }
        }

        // Given a groupId (autogenerated), returns the name related to that Id.
        function getGroupNameById(groupId){
            return $('.scoringGroupPlaceHolder #placeHolder' + groupId + ' .scoringGroupLabel').text();
        }

        function encodeHTMLEntities(decodedStr){
            return $("<div/>").text(decodedStr).html();
        }

        function decodeHTMLEntities(encodedStr){
            return $("<div/>").html(encodedStr).text();
        }

        // Sort questions to be shown in correct order for each section.
        function sortQuestions(listQuestions){
            var newQuestions = new Array(); // list to return

            if (listQuestions != undefined && listQuestions.length > 0) {
                for(i in listQuestions){
                    if (isSection(listQuestions[i])) {
                        newQuestions.push(listQuestions[i]);
                        for(e in listQuestions){
                            if (listQuestions[e].parent == listQuestions[i].id) {
                                newQuestions.push(listQuestions[e]);
                            }
                        }
                    }
                }
            }
            return newQuestions;
        }

        //-------------------------------------------------------

        //--------------Render saved scoring data section-----

        function getGroupObjects(){
            var existingGroups = $('#scoreGroupList').text();
            groups = $.parseJSON(existingGroups);
            return groups;
        }

        function getScoringValuesSaved(){
            var existingScoreValues = $('#scoreValuesList').text();
            scoringValues = $.parseJSON(existingScoreValues);
            return scoringValues;
        }

        //Shows the saved score values to the page.
        function renderScoringValues(){
            var scoringValues = getScoringValuesSaved();
            for (i in scoringValues) {
                var actualScore = scoringValues[i];
                var groupId = getGroupIdByName(actualScore.groupName);
                document.querySelector('#tableQuestions tr[id="' + actualScore.optionId + '"] td[id="' + groupId + '"] input').value = actualScore.value;
            }
        }

        //Shows the saved score groups to the page.
        function renderGroups(){
            var groups = getGroupObjects();
            if (groups != undefined && groups.length > 0 ) {
                for (i in groups){
                    addNewScoringGroup();
                    createNewGroupCustom(scoringGroupCount -1, encodeHTMLEntities(groups[i].caption) );
                }
            }
        }

        //------------------------------------------------------

        function createNewGroup() {
           hasUnsavedChanges = true;
           addNewScoringGroup();
        }

        $('#tableQuestions input.ppiInput, #tableQuestions input.svInput').live('blur', function(){
             if ( !validateInput($(this).val()) ) {
                 alert(MSG_ERR_INVALID_SCORE_VALUE);
                 $(this).val(0);
             }
        });
        // Checking if there is a change in some score value
        $('#tableQuestions input.ppiInput, #tableQuestions input.svInput').live('change', function(){
            hasUnsavedChanges = true;
        });

        //indexes for the section and question autonumber
        var questionNumber=1;
        var sectionNumber=1;

        $(document).ready(function(){
            drawFetchedQuestions();
        });

        /**
         * Draws the questions that the survey got from the database in the last batch.
         */
        function drawFetchedQuestions (){
            var existing_questions = $('.existing-questions');
            questions = $.parseJSON( existing_questions.text() );
            existing_questions.empty();

            // Convert all types to lower case, which is assumed accros the code
            for (i in questions){
                q = questions[i];
                q.type = q.type.toLowerCase();
            }

            //Sort questions (this way cloned survey are sorted too)
            questions = sortQuestions(questions);

            // Render each question in the table
            for(var idx in questions)
                createQuestionRow(questions[idx]);

            if ($('.hasMoreQuestions').text() == 'true') {
                blockPage();
                loadMoreQuestions();
            } else {
                unblockPage();
                afterAllQuestionsFetched();
            }

        }

        /** 2080
        * Seek for a specific question.
        * <p>
        * Look for a question by one of its option.
        *
        * @param id String          Identifier of question answer option.
        * @return question Object   Json Object of Question.
        */
        function seekQuestionByOption(id){

            for(i in questions){
                for (j in questions[i].options){
                    if (questions[i].options[j].id==id)
                        return questions[i];
                }
            }

            return null;
        }

        /** 2080
        * Seek for a specific question.
        * <p>
        * Look for a question by its Id.
        *
        * @param id String          Identifier of question.
        * @return question Object   Json Object of Question.
        */
        function seekQuestionById(id){

            if (id==null || id.length==0) return null;

            for (i in questions){
                if (questions[i].id==id){
                    return questions[i];
                }
            }

            return null;
        }

        /**
        * Draw the row of each question to apply scoring.
        * <p>
        * Create the component of scoring assigment.
        *
        * @param question Object.
        */
        function createQuestionRow(question){

            var sectionOfQuestion= seekQuestionById(question.parent);

            if(isSection(question)){
                var append='';

                append+=(question.type=='repeat') ? "<tr class='section repeat_section'>" : "<tr class='section'>";

                append+="<td class='question tertiaryPalette readonly'><label class='questionAutoNumber'>S"+ sectionNumber +"</label><span class='section'>" + htmlEncode(question.caption) + "</span>";

                if (question.type=='repeat'){
                    append+='<span style="color: #ff0000; font-size: small; margin-left: 10px;">({!$Label.SECTION_REPEAT})</span>';
                }

                append+="</td></tr>"

                $('#tableQuestions').append(append); sectionNumber++;
            }

            //if the type is radio i must render it an all its options
            else if (question.type=='radio' || question.type=='checkbox') {

                var classSectionRepeat='';

                classSectionRepeat= (sectionOfQuestion && sectionOfQuestion.type=='repeat') ? "repeat_section" : "";

                $('#tableQuestions').append("<tr><td class='question scoringQuestion "+classSectionRepeat+"'><label class='questionAutoNumber'>Q"+ questionNumber +"</label><span>" + htmlEncode(question.caption) + "</span></td></tr>");

                questionNumber++;

                var inputType = (question.type == 'radio') ? 'radio' : 'checkbox';

                classSectionRepeat= (sectionOfQuestion && sectionOfQuestion.type=='repeat') ? "class='repeat_section'" : "";

                for(var i = 0; i < question.options.length;i++){
                    var o = question.options[i];
                    $('#tableQuestions').append("<tr id=" + o.id + " "+classSectionRepeat+"><td class='questionZone'><input type='" + inputType + "' disabled='true'>" + htmlEncode(o.caption) + "</td> </tr>"); } }

            // finally for all the other, i have to render it as disable
            else{
                $('#tableQuestions').append("<tr><td class='question notScoringQuestion'><label class='questionAutoNumber'>Q"+ questionNumber +"</label><span>" + htmlEncode(question.caption) + "</span><div style='float:right'>{!$Label.SURVEY_SCORING_CANNOT_ASSIGN_SCORES}</div></td></tr>"); questionNumber++; }
        }

        function afterAllQuestionsFetched() {
            renderGroups();
            renderScoringValues();
        }
    </script>
</apex:page>