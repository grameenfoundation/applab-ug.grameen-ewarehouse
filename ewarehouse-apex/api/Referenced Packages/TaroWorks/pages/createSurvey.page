<!--(c) Copyright 2013 Grameen Foundation USA. All rights reserved-->
<apex:page sidebar="false" tabStyle="SurveyManager__tab" id="page" controller="gfsurveys.SurveyControllerExtension" action="{!init}">
    <apex:sectionHeader title="{!$ObjectType.gfsurveys__Survey__c.LabelPlural}" subtitle="{!$Label.CREATE_SURVEY_HEADER_TITLE}"/>
    <form name="formNewSurvey" id="formNewSurvey" onsubmit="if($(this).valid()){blockPage()}" method="post" action="{!$Page.surveySetting}">
    <c:blockOverlay label="{!$Label.LOADING}"/>
    <style type="text/css">
        .aliasField.empty{color:gray;}
        .select{width:215px; color:black;}
        div.checkBox{width:200px;}
        .selectRow{display:inline-block; vertical-align:top; margin-right:20px;}
        #checkCloneAssignments{margin:10px 5px 0pt 0px;}
        .errorMsg{margin-bottom:2px;border-left:2px solid IndianRed;}
        .bPageBlock .detailList tr td,.bPageBlock .detailList tr th,.hoverDetail .bPageBlock .detailList tr td,.hoverDetail .bPageBlock .detailList tr th
            {border:none;}
        textarea{resize:none;}
    </style>
    <!-- Following two scripts are needed to run SOQL from javascript -->
    <script type="text/javascript">
        var __sfdcSessionId = '{!GETSESSIONID()}';
    </script>
    <script src="/soap/ajax/25.0/connection.js" type="text/javascript"/>
    <apex:includeScript value="{!$Resource.gfsurveys__jquery}"/>
    <apex:includeScript value="{!$Resource.gfsurveys__jqueryui}"/>
    <apex:includeScript value="{!$Resource.gfsurveys__jquery_validate}" />
    <apex:includeScript value="{!$Resource.gfsurveys__js_utils}" />

    <script type="text/javascript">
        var surveys = null;

        $(document).ready(function(){

            surveys = $.parseJSON($('.existing-surveys').text());

            loadSelectOptions();
        });

        // Request the surveys from the server and load the select options
        function loadSelectOptions(){
            // Get the list of surveys
            $('#baseSurvey').remove('option');
            var options = '<option id="selectOne" value="default"> ---{!$Label.CREATE_SURVEY_SELECT_ONE}--- </option>';
            var ppiOptions = '<option id="selectOne" value="default"> ---{!$Label.CREATE_SURVEY_SELECT_ONE}--- </option>';
            var tempOptions = '<option id="selectOne" value="default"> ---{!$Label.CREATE_SURVEY_SELECT_ONE}--- </option>';

            // Create the options
            for (i in surveys){

                var op = createOption(surveys[i].id, surveys[i].id, surveys[i].name);

                if (surveys[i].isTemplate && surveys[i].isPPI) {
                    ppiOptions += op;
                }
                else if (surveys[i].isTemplate) {
                    tempOptions += op;
                }
                else {

                    options += op;
                }
            }

            // Add all options to the select
            $('#baseSurvey').append(options);
            $('#baseTemplates').append(tempOptions);
            $('#ppiList').append(ppiOptions);


            // Load the select options for the available libraries
            var libs = sforce.connection.query(
                "SELECT Name, Id " +
                "FROM {!$ObjectType.gfsurveys__SurveyLibrary__c.Name} " +
                "WHERE {!$ObjectType.gfsurveys__SurveyLibrary__c.Fields['Active__c'].Name} = true " +
                "AND {!$ObjectType.gfsurveys__SurveyLibrary__c.Fields['IsSurvey__c'].Name} = true " +
                "ORDER BY Name").records;
            var libOptions = '<option id="selectOne" value="default"> {!$Label.CREATESURVEY_LABEL_NOLIBRARY} </option>';

            // Generate the options for the libraries.
            if (typeof libs != 'undefined') {
                libOptions = '<option id="selectOne" value="default"> {!$Label.CREATESURVEY_LABEL_SELECTLIBRARY} </option>';
                if (typeof libs.length != 'undefined') {
                    for (var i = 0; i < libs.length; i++) {
                        libOptions += '<option Id="' + libs[i].id + '">' + htmlEncode(libs[i].Name) + '</option>';
                    }
                }
                else {
                    libOptions += '<option Id="' + libs.id + '">' + htmlEncode(libs.Name) + '</option>';
                }
            }

            // Add the options to the library select
            $('#libList').append(libOptions);

            // Run validation when user change the value of the clone survey combo
             $("#baseSurvey", "#baseTemplates", "#ppiList").change(function() {
                $("#formNewSurvey").validate().form();
            });
        }

        function createOption(id, value, text) {
            return '<option id="' + id + '" value="' + value + '">' + htmlEncode(text) + '</option>';
        }

        var currentSelection = '';
        function setDisabledSelectOption(element) {

            var remove = true;
            if ($(element).attr('id') == currentSelection) {
                remove = false;
            }
            currentSelection = $(element).attr('id');
            var clone_survey = $('#opClone').is(':checked');
            var blank_survey = $('#opBlank').is(':checked');
            var getTemp = $('#opGetTemplate').is(':checked');
            var getPPI = $('#opGetPPI').is(':checked');
            var template_survey = $('#opTemplate').is(':checked');

            $('#baseSurvey').prop('disabled', !clone_survey );
            $('#checkCloneAssignments').prop('disabled', !clone_survey );
            $('#libList').prop('disabled', !template_survey );
            $('#ppiList').prop('disabled', !getPPI );
            $('#baseTemplates').prop('disabled', !getTemp );

            if(!clone_survey){
                $('#baseSurvey').removeClass('error errorMsg');
            }
            if(!getPPI){
                $('#ppiList').removeClass('error errorMsg');
            }
            if(!getTemp){
                $('#baseTemplates').removeClass('error errorMsg');
            }
            if(!template_survey){
                $('#libList').removeClass('error errorMsg');
            }
            if (remove) {
                $('.errorMsg').remove();
            }
        }

        $.validator.addMethod("valueNotEquals", function(value, element, arg){
            $(element).toggleClass('error', arg == value);
            return arg != value;
        }, "Value must not equal to default");

        $("#formNewSurvey").validate({
            rules: {
                baseSurvey: { valueNotEquals: "default" },
                tempList: { valueNotEquals: "default" },
                ppiList: { valueNotEquals: "default" },
                libList : { valueNotEquals: "default" }
            },
            errorElement: "div",
            errorClass: "errorMsg",
            errorPlacement: function(error, element) {
                error.appendTo(element.parent("div"));
            },
            messages: {
                baseSurvey: {
                    valueNotEquals: "<strong>{!$Label.GENERAL_ERR_ERROR}</strong> {!$Label.CREATESURVEY_ERR_NOSURVEYSELECTED}"
                },
                tempList: {
                    valueNotEquals: "<strong>{!$Label.GENERAL_ERR_ERROR}</strong> {!$Label.GENERAL_PLEASE_SELECT_A} {!$Label.GENERAL_PPI_TEMPLATE}"
                },
                ppiList: {
                    valueNotEquals: "<strong>{!$Label.GENERAL_ERR_ERROR}</strong> {!$Label.GENERAL_PLEASE_SELECT_A} {!$Label.GENERAL_TEMPLATE}"
                },
                libList: {
                    valueNotEquals: "<strong>{!$Label.GENERAL_ERR_ERROR}</strong> {!$Label.CREATESURVEY_ERR_NOLIBRARYSELECTED}"
                }
            }
        });
    </script>
        <apex:outputText id="existing-surveys" styleClass="existing-surveys hidden" value="{!surveyList}"/>
        <apex:messages />
        <apex:pageBlock id="startWith">
            <apex:pageBlockSection title="{!$Label.CREATE_SURVEY_TITLE}" collapsible="false" id="blockSectionStartWith" columns="1">
                <apex:pageBlockSectionItem >
                    <input id="opBlank" type="radio" name="group1" value="blankSurvey" onclick="setDisabledSelectOption(this)" checked="true"><label for="opBlank">{!$Label.CREATE_SURVEY_BLANK}</label></input>
                </apex:pageBlockSectionItem>


                <apex:pageBlockSectionItem id="inptBlockSectionBaseSurvey">
                   <apex:outputPanel >

                    <div class="checkBox selectRow">
                        <input id="opClone" type="radio" name="group1" onclick="setDisabledSelectOption(this)" value="existingSurvey"><label for="opClone">{!$Label.CREATE_SURVEY_FROM_EXISTING}</label></input>
                    </div>

                    <div class="clone selectRow">
                        <div class="select">
                            <select id="baseSurvey" class="select" name="baseSurvey" size="1" disabled="true" >
                            </select>
                        </div>
                        <div class="checkCloneAssignments">
                            <input type="checkBox" id="checkCloneAssignments" name="checkBox" value="cloneAssignments" disabled="true"><label for="checkCloneAssignments">{!$Label.SURVEY_MANAGER_ALERT_CLONE_ASSIGNMENTS}</label></input>
                        </div>
                    </div>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
<!--
                <apex:pageBlockSectionItem id="inptBlockSectionItemTemplate" rendered="{!canUseTemplates}">
                    <div class="checkBox selectRow">
                        <input id="opGetTemplate" type="radio" name="group1" onclick="setDisabledSelectOption(this)" value="createFromTemplate"><label for="opGetTemplate">{!$Label.CREATESURVEY_FROM_TEMPLATE}</label></input>
                    </div>
                    <div class="lib selectRow">
                        <select id="baseTemplates" class="select" name="baseTemplates" size="1" disabled="true">
                        </select>
                    </div>
                </apex:pageBlockSectionItem>
-->
                <apex:pageBlockSectionItem id="inptBlockSectionItemPPI" rendered="{!canUsePPI}">
                    <div class="checkBox selectRow">
                        <input id="opGetPPI" type="radio" name="group1" onclick="setDisabledSelectOption(this)" value="createFromTemplate"><label for="opGetPPI">{!$Label.CREATESURVEY_FROM_PPI}</label></input>
                    </div>
                    <div class="lib selectRow">
                        <select id="ppiList" class="select" name="ppiList" size="1" disabled="true">
                        </select>
                    </div>
                </apex:pageBlockSectionItem>
<!--
                <apex:pageBlockSectionItem id="inptBlockSectionItemDownload">
                    <div class="checkBox selectRow">
                        <input id="opTemplate" type="radio" name="group1" onclick="setDisabledSelectOption(this)" value="templateSurvey"><label for="opTemplate">{!$Label.CREATESURVEY_DOWNLOAD_SURVEY}</label></input>
                    </div>
                    <div class="lib selectRow">
                        <select id="libList" class="select" name="libList" size="1" disabled="true">
                        </select>
                    </div>
                </apex:pageBlockSectionItem>
-->
            </apex:pageBlockSection>
        </apex:pageBlock>
        <div align="right">
            <c:SimpleCancelLink targetURL="{!$Page.gfsurveys__SurveyManager}" text="{!$Label.CANCEL}"/>&nbsp;&nbsp;
            <button value="{!$Label.SAVE_AND_CONTINUE}" action="{submit}" id="btnSaveContinue" >{!$Label.SAVE_AND_CONTINUE}</button>
        </div>
    </form>
</apex:page>